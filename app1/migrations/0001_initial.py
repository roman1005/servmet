# Generated by Django 3.0.6 on 2020-08-25 13:17

import app1.validators
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import phone_field.models
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalDataSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('host', models.CharField(max_length=100)),
                ('port', models.IntegerField()),
                ('rdbms', models.CharField(choices=[('MySQL', 'MySQL'), ('Oracle', 'Oracle'), ('MS SQL', 'MS SQL Server')], max_length=30)),
                ('schema', models.CharField(max_length=100)),
                ('login', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=100)),
                ('datasource_admin_mails', models.EmailField(max_length=254, null=True)),
                ('table', models.CharField(default='', max_length=100)),
                ('time_slot_begin', models.TimeField(blank=True, default='00:00:00', null=True, verbose_name='Start of allowed timeslot')),
                ('time_slot_end', models.TimeField(blank=True, default='23:59:59', null=True, verbose_name='Start of allowed timeslot')),
                ('lastExtraction', models.DateTimeField(default=datetime.datetime(2020, 8, 24, 13, 17, 47, 103100), verbose_name='last daily extraction')),
            ],
            options={
                'verbose_name': 'External Data Source',
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('design_id', models.IntegerField(default=0)),
                ('metric_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_begin', models.DateTimeField(null=True)),
                ('date_end', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('metric_order', models.IntegerField(default=9999)),
                ('nature', models.CharField(max_length=300)),
                ('publ_regularity', models.CharField(blank=True, choices=[('', ''), ('daily', 'daily'), ('weekly', 'weekly'), ('monthly', 'monthly'), ('quaterly', 'quaterly'), ('half-year', 'half-year'), ('yearly', 'yearly')], default='', max_length=100, verbose_name='Publication Regularity')),
                ('publ_deadline', models.IntegerField(blank=True, default='0', verbose_name='Publication Deadline,days')),
                ('measr_period', models.IntegerField(blank=True, default=0, verbose_name='Measurement Regularity period')),
                ('measr_regularity', models.CharField(blank=True, choices=[('sec', 'sec'), ('min', 'min'), ('hour', 'hour'), ('day', 'day'), ('week', 'week'), ('month', 'month'), ('quarter', 'quarter'), ('half-year', 'half-year'), ('year', 'year')], default='', max_length=100, null=True, verbose_name='Measurement Regularity unit')),
                ('extract_from_sql_datasource', models.BooleanField(blank=True, default=False, null=True, verbose_name='Extract Values from SQL-datascource')),
                ('sql_command', models.TextField(blank=True, default='', null=True)),
                ('sql_extraction_delay', models.IntegerField(blank=True, default=-1, null=True, verbose_name='Delay from the the end of period, hours')),
                ('time_slot_begin', models.TimeField(blank=True, default='00:00:00', null=True, verbose_name='Start of allowed timeslot')),
                ('time_slot_end', models.TimeField(blank=True, default='23:59:59', null=True, verbose_name='Start of allowed timeslot')),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app1.ExternalDataSource')),
            ],
        ),
        migrations.CreateModel(
            name='MetricValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.FloatField(verbose_name='Metric value')),
                ('date_begin', models.DateTimeField()),
                ('date_end', models.DateTimeField(blank=True)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app1.Metric')),
            ],
            options={
                'verbose_name': 'Metric value',
                'unique_together': {('metric', 'date_begin', 'date_end')},
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('design_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(default=999)),
                ('portfolioRed', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='Portfolio RED(RGB)')),
                ('portfolioGreen', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='Portfolio GREEN(RGB)')),
                ('portfolioBlue', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='Portfolio BLUE(RGB)')),
                ('sub_portfolioRed', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='SubPortfolio RED(RGB)')),
                ('sub_portfolioGreen', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='SubPortfolio GREEN(RGB)')),
                ('sub_portfolioBlue', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='SubPortfolio BLUE(RGB)')),
                ('refCard', models.URLField(blank=True, null=True, verbose_name='Link to RefCard')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('phone_number', phone_field.models.PhoneField(blank=True, max_length=31, null=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('INFO', 'INFO'), ('WARNING', 'WARNING'), ('ALERT', 'ALERT')], default='INFO', max_length=30)),
                ('text', models.TextField(verbose_name='Content')),
                ('subject', models.CharField(max_length=100)),
                ('recipientList', models.CharField(max_length=250, verbose_name='To')),
                ('status', models.IntegerField(blank=True, default=-1, null=True, verbose_name='Delivery status')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('attempt', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'User notification',
            },
        ),
        migrations.CreateModel(
            name='SubPortfolio',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('design_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(default=999)),
                ('refCard', models.URLField(blank=True, null=True, verbose_name='Link to RefCard')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app1.Portfolio')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('design_id', models.IntegerField(unique=True)),
                ('service_name', models.CharField(max_length=200, unique=True)),
                ('portfolio', models.CharField(max_length=250)),
                ('sub_portfolio', models.CharField(max_length=250)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('totalorder', models.CharField(blank=True, max_length=100, null=True, verbose_name='Total order')),
                ('notification_on', models.BooleanField(blank=True, default=True, null=True, verbose_name='Notification on')),
                ('alerts_on', models.BooleanField(blank=True, default=True, null=True, verbose_name='Alerts on')),
                ('refCard', models.URLField(blank=True, null=True, verbose_name='Link to RefCard')),
                ('architecture', models.URLField(blank=True, null=True, verbose_name='Architecture')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customerID', to='app1.Staff')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ownerID', to='app1.Staff')),
                ('subportfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subPortfolio', to='app1.SubPortfolio')),
            ],
        ),
        migrations.CreateModel(
            name='MetricMeasurement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_begin', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('timestamp', models.DateTimeField()),
                ('measurement', models.FloatField()),
                ('flg_valid', models.BooleanField(default=False)),
                ('dataSource', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='app1.ExternalDataSource')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app1.Metric')),
            ],
        ),
        migrations.AddField(
            model_name='metric',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app1.Service'),
        ),
        migrations.CreateModel(
            name='HistoricalUserNotification',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('type', models.CharField(choices=[('INFO', 'INFO'), ('WARNING', 'WARNING'), ('ALERT', 'ALERT')], default='INFO', max_length=30)),
                ('text', models.TextField(verbose_name='Content')),
                ('subject', models.CharField(max_length=100)),
                ('recipientList', models.CharField(max_length=250, verbose_name='To')),
                ('status', models.IntegerField(blank=True, default=-1, null=True, verbose_name='Delivery status')),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Updated at')),
                ('attempt', models.IntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical User notification',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubPortfolio',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('design_id', models.IntegerField(db_index=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(default=999)),
                ('refCard', models.URLField(blank=True, null=True, verbose_name='Link to RefCard')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('portfolio', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Portfolio')),
            ],
            options={
                'verbose_name': 'historical sub portfolio',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStaff',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=100)),
                ('phone_number', phone_field.models.PhoneField(blank=True, max_length=31, null=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical staff',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalService',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('design_id', models.IntegerField(db_index=True)),
                ('service_name', models.CharField(db_index=True, max_length=200)),
                ('portfolio', models.CharField(max_length=250)),
                ('sub_portfolio', models.CharField(max_length=250)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('totalorder', models.CharField(blank=True, max_length=100, null=True, verbose_name='Total order')),
                ('notification_on', models.BooleanField(blank=True, default=True, null=True, verbose_name='Notification on')),
                ('alerts_on', models.BooleanField(blank=True, default=True, null=True, verbose_name='Alerts on')),
                ('refCard', models.URLField(blank=True, null=True, verbose_name='Link to RefCard')),
                ('architecture', models.URLField(blank=True, null=True, verbose_name='Architecture')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Staff')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Staff')),
                ('subportfolio', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.SubPortfolio')),
            ],
            options={
                'verbose_name': 'historical service',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPortfolio',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('design_id', models.IntegerField(db_index=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(default=999)),
                ('portfolioRed', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='Portfolio RED(RGB)')),
                ('portfolioGreen', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='Portfolio GREEN(RGB)')),
                ('portfolioBlue', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='Portfolio BLUE(RGB)')),
                ('sub_portfolioRed', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='SubPortfolio RED(RGB)')),
                ('sub_portfolioGreen', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='SubPortfolio GREEN(RGB)')),
                ('sub_portfolioBlue', models.IntegerField(default=0, validators=[app1.validators.validateRGB], verbose_name='SubPortfolio BLUE(RGB)')),
                ('refCard', models.URLField(blank=True, null=True, verbose_name='Link to RefCard')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical portfolio',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMetricValueRegistration',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_begin', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('metric', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Metric')),
                ('metricValue', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.MetricValue')),
            ],
            options={
                'verbose_name': 'historical Metric value registration',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMetricValue',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('value', models.FloatField(verbose_name='Metric value')),
                ('date_begin', models.DateTimeField()),
                ('date_end', models.DateTimeField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('metric', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Metric')),
            ],
            options={
                'verbose_name': 'historical Metric value',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMetricMeasurement',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('date_begin', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('timestamp', models.DateTimeField()),
                ('measurement', models.FloatField()),
                ('flg_valid', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('dataSource', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.ExternalDataSource')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('metric', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Metric')),
            ],
            options={
                'verbose_name': 'historical metric measurement',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMetric',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('design_id', models.IntegerField(default=0)),
                ('metric_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_begin', models.DateTimeField(null=True)),
                ('date_end', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('Defined', 'Defined'), ('Submited', 'Submited'), ('Deployed', 'Deployed'), ('Operational', 'Operational'), ('Retired(Upgrade)', 'Retired(Upgrade)'), ('Retired(Replacemenet)', 'Retired(Replacemenet)'), ('Retired(Obsolete)', 'Retired(Obsolete)'), ('Cancelled(Upgrade)', 'Cancelled(Upgrade)'), ('Cancelled(Replacemenet)', 'Cancelled(Replacemenet)'), ('External premises', 'External premises'), ('Under consideration', 'Under consideration'), ('Unknown', 'Unknown'), ('Displaced', 'Displaced'), ('Not agreed', 'Not agreed')], default='Under consideration', max_length=40)),
                ('metric_order', models.IntegerField(default=9999)),
                ('nature', models.CharField(max_length=300)),
                ('publ_regularity', models.CharField(blank=True, choices=[('', ''), ('daily', 'daily'), ('weekly', 'weekly'), ('monthly', 'monthly'), ('quaterly', 'quaterly'), ('half-year', 'half-year'), ('yearly', 'yearly')], default='', max_length=100, verbose_name='Publication Regularity')),
                ('publ_deadline', models.IntegerField(blank=True, default='0', verbose_name='Publication Deadline,days')),
                ('measr_period', models.IntegerField(blank=True, default=0, verbose_name='Measurement Regularity period')),
                ('measr_regularity', models.CharField(blank=True, choices=[('sec', 'sec'), ('min', 'min'), ('hour', 'hour'), ('day', 'day'), ('week', 'week'), ('month', 'month'), ('quarter', 'quarter'), ('half-year', 'half-year'), ('year', 'year')], default='', max_length=100, null=True, verbose_name='Measurement Regularity unit')),
                ('extract_from_sql_datasource', models.BooleanField(blank=True, default=False, null=True, verbose_name='Extract Values from SQL-datascource')),
                ('sql_command', models.TextField(blank=True, default='', null=True)),
                ('sql_extraction_delay', models.IntegerField(blank=True, default=-1, null=True, verbose_name='Delay from the the end of period, hours')),
                ('time_slot_begin', models.TimeField(blank=True, default='00:00:00', null=True, verbose_name='Start of allowed timeslot')),
                ('time_slot_end', models.TimeField(blank=True, default='23:59:59', null=True, verbose_name='Start of allowed timeslot')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('data_source', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.ExternalDataSource')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app1.Service')),
            ],
            options={
                'verbose_name': 'historical metric',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalExternalDataSource',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('host', models.CharField(max_length=100)),
                ('port', models.IntegerField()),
                ('rdbms', models.CharField(choices=[('MySQL', 'MySQL'), ('Oracle', 'Oracle'), ('MS SQL', 'MS SQL Server')], max_length=30)),
                ('schema', models.CharField(max_length=100)),
                ('login', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=100)),
                ('datasource_admin_mails', models.EmailField(max_length=254, null=True)),
                ('table', models.CharField(default='', max_length=100)),
                ('time_slot_begin', models.TimeField(blank=True, default='00:00:00', null=True, verbose_name='Start of allowed timeslot')),
                ('time_slot_end', models.TimeField(blank=True, default='23:59:59', null=True, verbose_name='Start of allowed timeslot')),
                ('lastExtraction', models.DateTimeField(default=datetime.datetime(2020, 8, 24, 13, 17, 47, 103100), verbose_name='last daily extraction')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical External Data Source',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='MetricValueRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_begin', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app1.Metric')),
                ('metricValue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app1.MetricValue')),
            ],
            options={
                'verbose_name': 'Metric value registration',
                'unique_together': {('metric', 'date_begin', 'date_end')},
            },
        ),
    ]
